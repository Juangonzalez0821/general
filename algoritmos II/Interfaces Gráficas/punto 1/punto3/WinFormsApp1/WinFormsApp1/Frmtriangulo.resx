<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AACIZZr+Bxqp8NN3dkrwAAAAAElFTkSuQmCC
</value>
  </data>
</root>